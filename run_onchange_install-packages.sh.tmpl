#!/usr/bin/env bash
set -eu

FONTS_DIR="$HOME/.local/share/fonts"

BREW_APPS=(
{{- range .install.brew }}
  "{{ .name }}"
{{- end }}
)

NPM_PACKAGES=(
{{- range .install.npm }}
  "{{ .name }}"
{{- end }}
)

BREW_CASKS=(
{{- range .install.brew_cask }}
  "{{ .name }}"
{{- end }}
)

FLATPAK_APPS=(
{{- range .install.flatpak }}
  "{{ .name }}"
{{- end }}
)

declare -A APPIMAGE_APPS
{{- range .install.appimage }}
APPIMAGE_APPS["{{ .name }}"]="{{ .url }}"
{{- end }}

GNOME_EXTENSIONS=(
{{- range .install.gnome_extension }}
  "{{ .uuid }}"
{{- end }}
)

source ./common.sh

install_brew_apps() {
  echo "üß©  Installing Brew apps..."

  local installed=$(brew list -1 --installed-on-request)
  for app in "${BREW_APPS[@]}"; do
    if echo "${installed}" | /usr/sbin/grep -q "^${app}$"; then
      echo "‚úÖ  ${app} is already installed."
    else
      echo "üü°  ${app} is not installed."
      brew install "${app}"
    fi
  done
}

install_npm_packages() {
  echo "üß©  Installing global NPM packages..."

  local installed=$(npm ls -g --json | jq -r '.dependencies | keys | .[]')
  for pkg in "${NPM_PACKAGES[@]}"; do
    if echo "${installed}" | /usr/sbin/grep -q "^${pkg}$"; then
      echo "‚úÖ  ${pkg} is already installed."
    else
      echo "üü°  ${pkg} is not installed."
      npm install -g "${pkg}"
    fi
  done
}

install_brew_casks() {
  echo "üß©  Installing Brew casks..."

  local installed=$(brew list -1 --casks)
  for cask in "${BREW_CASKS[@]}"; do
    if echo "${installed}" | /usr/sbin/grep -q "^${cask}$"; then
      echo "‚úÖ  ${cask} is already installed."
    else
      echo "üü°  ${cask} is not installed."
      brew install --cask "${cask}"
    fi
  done
}

install_gnome_ext() {
  local uuid="$1"; shift
  local gnome_version="$1"; shift

  echo "Installing GNOME extension '${uuid}'..."

  local ext_info=$(curl -s "https://extensions.gnome.org/extension-info/?uuid=${uuid}")
  local ext_version=$(echo "${ext_info}" \
    | jq -r ".shell_version_map | to_entries[] | select(.key == \"${gnome_version}\") | .value.pk")
  if [[ "${ext_version}" -eq "" ]]; then
    echo "Warning: Extension ${uuid} does not have a version published for GNOME ${gnome_version}. Falling back to the last available extension version."
    ext_version=$(echo "${ext_info}" \
      | jq -r '[.shell_version_map[]] | max_by(.version).pk')
  fi

  local download_url="https://extensions.gnome.org/download-extension/${uuid}.shell-extension.zip?version_tag=${ext_version}"
  local temp_file="/tmp/${uuid}.shell-extension.zip"
  if ! curl -sL "$download_url" -o "$temp_file"; then
      echo "Failed to download extension"
      return 1
  fi

  if ! gnome-extensions install --force "$temp_file" 2>/dev/null; then
      echo "Failed to install extension"
      rm -f "$temp_file"
      return 1
  fi

  # Enable extension
  if ! gnome-extensions enable "${uuid}" 2>/dev/null; then
      echo "Failed to enable extension"
      rm -f "$temp_file"
      return 1
  fi

  rm -f "$temp_file"
  echo "‚úÖ Successfully installed and enabled ${uuid}"
  return 0  
}

install_gnome_extensions() {
  echo "üß©  Installing GNOME extensions..."

  local gnome_version
  gnome_version=$(gnome-shell --version | awk -F'[ .]' '{print $3}')

  local enabled_extensions=$(gnome-extensions list --enabled)
  for uuid in "${GNOME_EXTENSIONS[@]}"; do
    if echo "${enabled_extensions}" | grep -q "^${uuid}$"; then
      echo "‚úÖ  ${uuid} is installed and enabled."
    else
      echo "üü°  ${uuid} is not enabled or not installed."
      install_gnome_ext "${uuid}" "${gnome_version}"
    fi
  done
}

install_flatpak_apps() {
  echo "üß©  Installing Flatpak apps..."

  for app in "${FLATPAK_APPS[@]}"; do
    if flatpak info "${app}" >/dev/null 2>&1; then
      echo "‚úÖ  Flatpak '${app}' is installed."
    else
      echo "üü°  Flatpak '${app}' is not installed."
      flatpak install --noninteractive --assumeyes "${app}"
    fi
  done
}

install_appimage() {
  local name="$1"; shift
  local url="$1"; shift

  echo "Installing AppImage from ${url} ..."
  local tmp_file=$(mktemp --suffix=.AppImage)
  curl -L -o "${tmp_file}" "${url}"
  flatpak run it.mijorus.gearlever \
    --integrate \
    --replace \
    --yes \
    --update-url "${url}" \
  "${tmp_file}"
}

install_appimages() {
  echo "üß©  Installing AppImages..."

  local installed_apps=$(flatpak run it.mijorus.gearlever --list-installed)

  for app in "${!APPIMAGE_APPS[@]}"; do
    if echo $installed_apps | grep -q "^${app}\s"; then
      echo "‚úÖ  ${app} is already installed."
    else
      echo "üü°  ${app} is not installed."
      install_appimage "${app}" "${APPIMAGE_APPS[$app]}" 
    fi
  done
}

update_fonts_cache() {
  echo "üß©  Updating fonts cache..."
  fc-cache -f
}

configure_fish() {
  echo "üêü  Configuring fish..."

  local fish_plugins=$(cat $HOME/.config/fish/fish_plugins)

  if echo "${fish_plugins}" | grep -q "^jorgebucaran/fisher$"; then
    echo "‚úÖ  Fisher is already installed."
  else
    fish -c "curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install jorgebucaran/fisher"
  fi

  if echo "${fish_plugins}" | grep -q "^ilancosman/tide@v6$"; then
    echo "‚úÖ  Tide is already installed."
  else
    fish -c "fisher install IlanCosman/tide@v6"
    fish -c "tide configure --auto --style=Lean --prompt_colors='True color' --show_time='24-hour format' --lean_prompt_height='One line' --prompt_spacing=Compact --icons='Many icons' --transient=Yes"
  fi
}

configure_tldr() {
  echo "üìú  Configuring tldr..."

  tldr --update
}

install_bazzite_dx() {
  install_brew_apps
  install_npm_packages
  install_brew_casks
  install_flatpak_apps
  install_appimages


  install_gnome_extensions

  update_fonts_cache
  configure_tldr
  configure_fish
}

install() {
  case "$(get_os)" in
    bazzite-dx-gnome|bazzite-dx-nvidia-gnome)
      install_bazzite_dx
      ;;
  esac
}

install
